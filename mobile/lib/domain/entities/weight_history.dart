/// Entity: WeightHistory
///
/// Historial de pesajes de un animal con an√°lisis.
/// Single Responsibility: Representar datos de historial de peso.
///
/// Domain Layer - Entity
library;

import 'package:equatable/equatable.dart';

import 'cattle.dart';
import 'weight_estimation.dart';

/// Historial de pesajes con an√°lisis
class WeightHistory extends Equatable {
  /// ID del animal
  final String cattleId;

  /// Informaci√≥n del animal
  final Cattle cattle;

  /// Lista de pesajes ordenados cronol√≥gicamente (m√°s reciente primero)
  final List<WeightEstimation> weighings;

  /// Peso actual (kg) - √∫ltimo pesaje
  final double? currentWeight;

  /// Peso inicial (kg) - primer pesaje
  final double? initialWeight;

  /// Ganancia total de peso (kg)
  final double totalGain;

  /// Ganancia diaria promedio - GDP (kg/d√≠a)
  final double averageDailyGain;

  /// Proyecci√≥n de peso a 30 d√≠as (kg)
  final double? projectedWeight30Days;

  /// Proyecci√≥n de peso a 60 d√≠as (kg)
  final double? projectedWeight60Days;

  /// Proyecci√≥n de peso a 90 d√≠as (kg)
  final double? projectedWeight90Days;

  /// Anomal√≠as detectadas
  final List<WeightAnomaly> anomalies;

  const WeightHistory({
    required this.cattleId,
    required this.cattle,
    required this.weighings,
    this.currentWeight,
    this.initialWeight,
    required this.totalGain,
    required this.averageDailyGain,
    this.projectedWeight30Days,
    this.projectedWeight60Days,
    this.projectedWeight90Days,
    required this.anomalies,
  });

  /// Verifica si tiene al menos 2 pesajes para an√°lisis
  bool get hasEnoughDataForAnalysis => weighings.length >= 2;

  /// N√∫mero total de pesajes
  int get totalWeighings => weighings.length;

  @override
  List<Object?> get props => [
        cattleId,
        cattle,
        weighings,
        currentWeight,
        initialWeight,
        totalGain,
        averageDailyGain,
        projectedWeight30Days,
        projectedWeight60Days,
        projectedWeight90Days,
        anomalies,
      ];
}

/// Anomal√≠a detectada en el historial de peso
class WeightAnomaly extends Equatable {
  /// Tipo de anomal√≠a
  final AnomalyType type;

  /// Descripci√≥n de la anomal√≠a
  final String description;

  /// Fecha de detecci√≥n
  final DateTime detectedAt;

  /// Severidad (1-5, siendo 5 cr√≠tico)
  final int severity;

  /// Valor que dispar√≥ la alerta
  final double? value;

  const WeightAnomaly({
    required this.type,
    required this.description,
    required this.detectedAt,
    required this.severity,
    this.value,
  });

  @override
  List<Object?> get props => [
        type,
        description,
        detectedAt,
        severity,
        value,
      ];
}

/// Tipos de anomal√≠as detectables
enum AnomalyType {
  /// P√©rdida significativa de peso (>5% en 7 d√≠as)
  significantWeightLoss,

  /// Estancamiento en crecimiento (>15 d√≠as sin ganancia)
  growthStagnation,

  /// GDP bajo para categor√≠a de edad
  lowAverageDailyGain,

  /// Variaci√≥n inusual entre pesajes consecutivos
  unusualVariation,
}

/// Extension para anomaly types
extension AnomalyTypeExtension on AnomalyType {
  /// Nombre para mostrar en UI
  String get displayName {
    switch (this) {
      case AnomalyType.significantWeightLoss:
        return 'P√©rdida Significativa de Peso';
      case AnomalyType.growthStagnation:
        return 'Estancamiento en Crecimiento';
      case AnomalyType.lowAverageDailyGain:
        return 'Ganancia Diaria Baja';
      case AnomalyType.unusualVariation:
        return 'Variaci√≥n Inusual';
    }
  }

  /// √çcono representativo
  String get icon {
    switch (this) {
      case AnomalyType.significantWeightLoss:
        return '‚ö†Ô∏è';
      case AnomalyType.growthStagnation:
        return 'üìâ';
      case AnomalyType.lowAverageDailyGain:
        return 'üê¢';
      case AnomalyType.unusualVariation:
        return '‚ùì';
    }
  }
}

