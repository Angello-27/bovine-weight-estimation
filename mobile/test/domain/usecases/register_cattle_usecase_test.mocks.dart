// Mocks generated by Mockito 5.4.6 from annotations
// in bovine_weight_mobile/test/domain/usecases/register_cattle_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bovine_weight_mobile/core/errors/failures.dart' as _i5;
import 'package:bovine_weight_mobile/domain/entities/cattle.dart' as _i6;
import 'package:bovine_weight_mobile/domain/repositories/cattle_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CattleRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCattleRepository extends _i1.Mock implements _i3.CattleRepository {
  MockCattleRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Cattle>> registerCattle(
    _i6.Cattle? cattle,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#registerCattle, [cattle]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Cattle>>.value(
              _FakeEither_0<_i5.Failure, _i6.Cattle>(
                this,
                Invocation.method(#registerCattle, [cattle]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Cattle>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Cattle?>> getCattleById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getCattleById, [id]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Cattle?>>.value(
              _FakeEither_0<_i5.Failure, _i6.Cattle?>(
                this,
                Invocation.method(#getCattleById, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Cattle?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Cattle?>> getCattleByEarTag(
    String? earTag,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCattleByEarTag, [earTag]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Cattle?>>.value(
              _FakeEither_0<_i5.Failure, _i6.Cattle?>(
                this,
                Invocation.method(#getCattleByEarTag, [earTag]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Cattle?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Cattle>>> getAllCattle() =>
      (super.noSuchMethod(
            Invocation.method(#getAllCattle, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Cattle>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Cattle>>(
                    this,
                    Invocation.method(#getAllCattle, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Cattle>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Cattle>>> getActiveCattle() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveCattle, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Cattle>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Cattle>>(
                    this,
                    Invocation.method(#getActiveCattle, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Cattle>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Cattle>>> searchCattle(
    String? searchTerm,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#searchCattle, [searchTerm]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Cattle>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Cattle>>(
                    this,
                    Invocation.method(#searchCattle, [searchTerm]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Cattle>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Cattle>> updateCattle(
    _i6.Cattle? cattle,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateCattle, [cattle]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Cattle>>.value(
              _FakeEither_0<_i5.Failure, _i6.Cattle>(
                this,
                Invocation.method(#updateCattle, [cattle]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Cattle>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Cattle>> updateCattleStatus(
    String? id,
    _i6.CattleStatus? status,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateCattleStatus, [id, status]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Cattle>>.value(
              _FakeEither_0<_i5.Failure, _i6.Cattle>(
                this,
                Invocation.method(#updateCattleStatus, [id, status]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Cattle>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteCattle(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCattle, [id]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#deleteCattle, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> earTagExists(
    String? earTag, {
    String? excludeId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#earTagExists, [earTag], {#excludeId: excludeId}),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(
                  #earTagExists,
                  [earTag],
                  {#excludeId: excludeId},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, Map<_i6.CattleStatus, int>>>
  getCattleCountByStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getCattleCountByStatus, []),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, Map<_i6.CattleStatus, int>>
                >.value(
                  _FakeEither_0<_i5.Failure, Map<_i6.CattleStatus, int>>(
                    this,
                    Invocation.method(#getCattleCountByStatus, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, Map<_i6.CattleStatus, int>>>);
}
